#+TITLE: CLIENT SERVER
#+AUTHOR: FCIM FAF 203 Cius Iurie

** TABLE OF CONTENTS :toc:
  - [[#instalation][INSTALATION]]
  - [[#about][ABOUT]]
  - [[#client][CLIENT]]
  - [[#more-details][MORE DETAILS]]
  - [[#system-design-and-requirements][SYSTEM DESIGN AND REQUIREMENTS]]
  - [[#links][LINKS]]
  - [[#contact][CONTACT]]

** INSTALATION

Paste the following into the =docker-compose.yml= file

#+BEGIN_SRC yaml
version: '3'

services:
  kitchen_1:
    build: ./kitchen-server
    ports:
      - "3111:3111"
    environment:
      - USING_DOCKER_COMPOSE=1
      - RESTAURANT_ID=1
    depends_on: 
      - restaurant-aggregator
  kitchen_2:
    build: ./kitchen-server
    ports:
      - "3222:3222"
    environment:
      - USING_DOCKER_COMPOSE=1
      - RESTAURANT_ID=2
    depends_on: 
      - restaurant-aggregator
  restaurant-aggregator:
    build: ./restaurant-aggregator-server
    ports:
      - "7777:7777"
    environment:
      - USING_DOCKER_COMPOSE=1
  client-server:
    build: ./client-server
    ports:
      - "3333:3333"
    environment:
      - USING_DOCKER_COMPOSE=1
    depends_on: 
      - restaurant-aggregator
      - kitchen_1
      - kitchen_2
#+END_SRC

** ABOUT

Client service represents component which simulates end clients of the system, which want just to order and pick up food from restaurant.

Client service have to generate end users orders and send orders to =Food Ordering= service. Client service consists of =clients= which will actually generates orders and represents abstraction of a real system client.

** CLIENT

Main work unit of client service is =Client=. Each =client= is a separate work unit which works completely separate and isolated with respect to other clients from client service

** MORE DETAILS

In Client service we have multiple independent work units which are clients . Each client have to be implemented as a dedicated thread. Each client implements logic of generating new totally random order with random number of foods and random foods assigned to this order. Actually client is just a combination of table and waiter from dinning hall .

In order to know which restaurants are connected to our Food ordering system, each client first of all have to request from Food ordering service, data about available restaurants which will include each restaurant menu. Having all restaurants menu,

Client generates random order and send generated order to food ordering service. Client can order from multiple restaurants, that means that client final order send to Food ordering service can include multiple restaurants orders.

Client order is represented by at least 1 restaurant order, but usually client should order from multiple restaurants. For each restaurant order maximum wait time that a client is willing to wait before order pick up, should be calculated by taking the item with the highest preparation-time from the restaurant order and multiply it by 1.8 .

As a response sending generated order to Food ordering service, client receives data which includes estimated preparation time for each order for a dedicated restaurant. Client waits for this time plus some additional realistic time coefficient and after this, performs request to restaurant dinning hall to pick up the order.

If order is not ready at the time client performs request to the restaurant dinning hall in order to pick up his order. Client waits for the order the time specified in response from restaurant dinning hall .

Each client should be created and destroyed for each new order request. This means, clients have to be destroyed after they pick up their orders. New clients should be created instead of destroyed cients .

** SYSTEM DESIGN AND REQUIREMENTS

In this simulation we will have multiple clients communicating with food ordering service and it should communicate with multiple restaurants.

For this simulation we will use multiple restaurants, each restaurant being replica of same restaurant implementation but with different menu and configuration of number of tables, cooks and cooking apparatus.

Your setup have to include:

1. One client service with multiple work units (threads) of clients.
2. One food ordering service.
3. Multiple restaurants. Each restaurant is represented by dinning hall and kitchen. Your simulation have to include at least 2 restaurants with various setup. Recommended number of restaurants is 4.

** LINKS

- [[https://github.com/IuraCPersonal/pr][Main Repository]]
- [[https://github.com/IuraCPersonal/dining-hall-component][The Dining Hall Server]]
- [[https://github.com/IuraCPersonal/kitchen-component][The Kitchen Server]]
- [[https://github.com/IuraCPersonal/restaurant-aggregator-component][Restaurant Aggregator Server]]

** CONTACT

If you have any question, please contact me through email: =iurie.cius@isa.utm.md=.
